#!/usr/bin/env python3
"""
Screenshot ‡§î‡§∞ Text Reading Script
‡§Ø‡§π script screenshot ‡§≤‡•á‡§§‡•Ä ‡§π‡•à ‡§î‡§∞ ‡§â‡§∏‡•á file ‡§Æ‡•á‡§Ç save ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à
‡§∏‡§æ‡§• ‡§π‡•Ä screen ‡§™‡§∞ ‡§Æ‡•å‡§ú‡•Ç‡§¶ text ‡§≠‡•Ä ‡§™‡§¢‡§º‡§§‡•Ä ‡§π‡•à
"""

import asyncio
import sys
from pathlib import Path
from datetime import datetime

# Add the parent directory to the path so we can import computer_genie
sys.path.insert(0, str(Path(__file__).parent))

from computer_genie.vision.screenshort import Screenshot
from computer_genie.vision import OCR
from computer_genie.utils import setup_logger

async def take_screenshot_and_read_text():
    """Screenshot ‡§≤‡•á‡§ï‡§∞ text ‡§≠‡•Ä ‡§™‡§¢‡§º‡§§‡§æ ‡§π‡•à"""
    
    # Setup logging
    logger = setup_logger("screenshot_script")
    logger.info("Screenshot ‡§î‡§∞ Text Reading Script ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à...")
    
    try:
        # Screenshot object ‡§¨‡§®‡§æ‡§è‡§Ç
        screenshot = Screenshot()
        logger.info("Screenshot utility initialized")
        
        # Screenshot ‡§≤‡•á‡§Ç
        logger.info("Screenshot ‡§≤‡•Ä ‡§ú‡§æ ‡§∞‡§π‡•Ä ‡§π‡•à...")
        image = await screenshot.capture()
        
        if image:
            # Screenshot ‡§ï‡•ã file ‡§Æ‡•á‡§Ç save ‡§ï‡§∞‡•á‡§Ç
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            screenshot_path = f"screenshot_{timestamp}.png"
            image.save(screenshot_path)
            logger.info(f"Screenshot saved: {screenshot_path}")
            print(f"‚úÖ Screenshot saved: {screenshot_path}")
            print(f"üìè Image size: {image.size}")
            
            # OCR ‡§ï‡•á ‡§≤‡§ø‡§è image ‡§ï‡•ã numpy array ‡§Æ‡•á‡§Ç convert ‡§ï‡§∞‡•á‡§Ç
            import numpy as np
            image_array = np.array(image)
            
            # OCR object ‡§¨‡§®‡§æ‡§è‡§Ç ‡§î‡§∞ text ‡§™‡§¢‡§º‡•á‡§Ç
            ocr = OCR()
            logger.info("Text reading ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à...")
            text = await ocr.extract_text(image_array)
            
            print(f"\nüìñ Screen ‡§™‡§∞ ‡§Æ‡§ø‡§≤‡§æ Text:")
            print("=" * 50)
            if text and "not available" not in text.lower() and "error" not in text.lower():
                print(text)
            else:
                print("‚ö†Ô∏è Text reading ‡§ï‡•á ‡§≤‡§ø‡§è Tesseract OCR install ‡§ï‡§∞‡§®‡§æ ‡§π‡•ã‡§ó‡§æ")
                print("üì• Download link: https://github.com/UB-Mannheim/tesseract/wiki")
                print(f"üîç OCR Status: {text}")
            print("=" * 50)
            
        else:
            logger.error("Screenshot ‡§≤‡•á‡§®‡•á ‡§Æ‡•á‡§Ç error ‡§Ü‡§à")
            print("‚ùå Screenshot ‡§≤‡•á‡§®‡•á ‡§Æ‡•á‡§Ç problem ‡§π‡•Å‡§à")
            
    except Exception as e:
        logger.error(f"Error: {e}")
        print(f"‚ùå Error: {e}")
    
    finally:
        # Cleanup
        screenshot.close()

async def main():
    """Main function"""
    print("üñ•Ô∏è  Computer Genie Screenshot & Text Reader")
    print("=" * 50)
    
    await take_screenshot_and_read_text()
    
    print("\n‚ú® Script completed!")
    print("üí° ‡§Ö‡§ó‡§∞ text reading ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§§‡•ã Tesseract install ‡§ï‡§∞‡•á‡§Ç")

if __name__ == "__main__":
    # Run the script
    asyncio.run(main())