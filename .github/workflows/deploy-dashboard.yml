name: Deploy Dashboard Only

on:
  push:
    branches: [ main ]
    paths:
      - 'computer-genie-dashboard/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'computer-genie-dashboard/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  DASHBOARD_DIR: computer-genie-dashboard

jobs:
  changes:
    name: Detect Dashboard Changes
    runs-on: ubuntu-latest
    outputs:
      dashboard: ${{ steps.changes.outputs.dashboard }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for dashboard changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          dashboard:
            - 'computer-genie-dashboard/**'

  test-dashboard:
    name: Test Dashboard
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.dashboard == 'true' || github.event_name == 'workflow_dispatch'
    defaults:
      run:
        working-directory: ${{ env.DASHBOARD_DIR }}
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: ${{ env.DASHBOARD_DIR }}/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint
      
    - name: Run type check
      run: npm run type-check
      
    - name: Run tests
      run: npm run test
      
    - name: Generate test coverage
      run: npm run test:coverage

  build-dashboard:
    name: Build Dashboard
    runs-on: ubuntu-latest
    needs: [changes, test-dashboard]
    if: needs.changes.outputs.dashboard == 'true' || github.event_name == 'workflow_dispatch'
    defaults:
      run:
        working-directory: ${{ env.DASHBOARD_DIR }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: ${{ env.DASHBOARD_DIR }}/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dashboard-build
        path: ${{ env.DASHBOARD_DIR }}/.next/
        retention-days: 7

  security-audit:
    name: Security Audit Dashboard
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.dashboard == 'true' || github.event_name == 'workflow_dispatch'
    defaults:
      run:
        working-directory: ${{ env.DASHBOARD_DIR }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: ${{ env.DASHBOARD_DIR }}/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate

  docker-dashboard:
    name: Build Dashboard Docker Image
    runs-on: ubuntu-latest
    needs: [test-dashboard, build-dashboard, security-audit]
    if: github.ref == 'refs/heads/main' && (needs.changes.outputs.dashboard == 'true' || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: computer-genie/dashboard
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ env.DASHBOARD_DIR }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy Dashboard to Staging
    runs-on: ubuntu-latest
    needs: [test-dashboard, build-dashboard, security-audit]
    if: github.ref == 'refs/heads/main' && (needs.changes.outputs.dashboard == 'true' || github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Vercel (Staging)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./${{ env.DASHBOARD_DIR }}
        scope: ${{ secrets.VERCEL_ORG_ID }}

  deploy-production:
    name: Deploy Dashboard to Production
    runs-on: ubuntu-latest
    needs: [test-dashboard, build-dashboard, security-audit, docker-dashboard]
    if: github.ref == 'refs/heads/main' && (needs.changes.outputs.dashboard == 'true' || github.event.inputs.environment == 'production')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Vercel (Production)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        working-directory: ./${{ env.DASHBOARD_DIR }}
        scope: ${{ secrets.VERCEL_ORG_ID }}

  notify-deployment:
    name: Notify Dashboard Deployment
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#dashboard-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        text: 'Dashboard deployment completed'