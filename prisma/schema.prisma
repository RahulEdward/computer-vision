// Prisma Schema for Computer Genie SaaS

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  avatar        String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLogin     DateTime?

  // Relations
  accounts      Account[]
  sessions      Session[]
  workspaces    WorkspaceMember[]
  ownedWorkspaces Workspace[] @relation("WorkspaceOwner")
  apiKeys       ApiKey[]
  
  @@map("users")
}

// OAuth Accounts
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Sessions
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Workspace Model
model Workspace {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  ownerId     String
  plan        String   @default("free")
  customDomain String?
  settings    String?  // JSON stored as string for SQLite
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner        User              @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members      WorkspaceMember[]
  subscription Subscription?
  usage        Usage[]
  workflows    Workflow[]
  apiKeys      ApiKey[]

  @@map("workspaces")
}

// Workspace Members
model WorkspaceMember {
  id          String   @id @default(cuid())
  workspaceId String
  userId      String
  role        String   @default("member") // owner, admin, member
  joinedAt    DateTime @default(now())

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
  @@map("workspace_members")
}

// Subscription Model
model Subscription {
  id                    String   @id @default(cuid())
  workspaceId           String   @unique
  plan                  String   @default("free")
  status                String   @default("active")
  currentPeriodStart    DateTime @default(now())
  currentPeriodEnd      DateTime
  cancelAtPeriodEnd     Boolean  @default(false)
  stripeCustomerId      String?  @unique
  stripeSubscriptionId  String?  @unique
  stripePriceId         String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

// Usage Tracking
model Usage {
  id          String   @id @default(cuid())
  workspaceId String
  period      String   // YYYY-MM format
  workflows   Int      @default(0)
  executions  Int      @default(0)
  storage     Int      @default(0)
  apiCalls    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, period])
  @@map("usage")
}

// Workflow Model
model Workflow {
  id          String   @id @default(cuid())
  workspaceId String
  name        String
  description String?
  nodes       String   // JSON stored as string for SQLite
  edges       String   // JSON stored as string for SQLite
  status      String   @default("draft") // draft, active, paused
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspace  Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  executions Execution[]

  @@map("workflows")
}

// Workflow Execution
model Execution {
  id          String   @id @default(cuid())
  workflowId  String
  status      String   @default("pending") // pending, running, success, failed
  startedAt   DateTime @default(now())
  completedAt DateTime?
  duration    Int?     // milliseconds
  input       String?  // JSON stored as string for SQLite
  output      String?  // JSON stored as string for SQLite
  error       String?

  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@map("executions")
}

// API Keys
model ApiKey {
  id          String    @id @default(cuid())
  name        String
  key         String    @unique
  workspaceId String
  userId      String
  lastUsed    DateTime?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

// Audit Log
model AuditLog {
  id          String   @id @default(cuid())
  workspaceId String?
  userId      String?
  action      String
  resource    String
  details     String?  // JSON stored as string for SQLite
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  @@map("audit_logs")
}
