#!/usr/bin/env python3
"""
Screenshot Viewer ‡§î‡§∞ Text Reader
‡§Ø‡§π script screenshot ‡§≤‡•á‡§§‡•Ä ‡§π‡•à, save ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à, ‡§î‡§∞ ‡§â‡§∏‡•á open ‡§≠‡•Ä ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à
"""

import asyncio
import sys
import os
import subprocess
from pathlib import Path
from datetime import datetime

# Add the parent directory to the path so we can import computer_genie
sys.path.insert(0, str(Path(__file__).parent))

from computer_genie.vision.screenshort import Screenshot
from computer_genie.vision import OCR
from computer_genie.utils import setup_logger

def open_image(image_path):
    """Image ‡§ï‡•ã default viewer ‡§Æ‡•á‡§Ç open ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"""
    try:
        if os.name == 'nt':  # Windows
            os.startfile(image_path)
        elif os.name == 'posix':  # macOS/Linux
            subprocess.run(['open', image_path])  # macOS
            # subprocess.run(['xdg-open', image_path])  # Linux
        print(f"üñºÔ∏è  Image opened: {image_path}")
        return True
    except Exception as e:
        print(f"‚ùå Image open ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç error: {e}")
        return False

async def take_and_view_screenshot():
    """Screenshot ‡§≤‡•á‡§ï‡§∞ view ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§î‡§∞ text ‡§≠‡•Ä ‡§™‡§¢‡§º‡§§‡§æ ‡§π‡•à"""
    
    # Setup logging
    logger = setup_logger("screenshot_viewer")
    
    print("üñ•Ô∏è  Computer Genie Screenshot Viewer & Text Reader")
    print("=" * 60)
    
    try:
        # Screenshot object ‡§¨‡§®‡§æ‡§è‡§Ç
        screenshot = Screenshot()
        logger.info("Screenshot utility initialized")
        
        # Screenshot ‡§≤‡•á‡§Ç
        print("üì∏ Screenshot ‡§≤‡•Ä ‡§ú‡§æ ‡§∞‡§π‡•Ä ‡§π‡•à...")
        image = await screenshot.capture()
        
        if image:
            # Screenshot ‡§ï‡•ã file ‡§Æ‡•á‡§Ç save ‡§ï‡§∞‡•á‡§Ç
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            screenshot_path = f"screenshot_{timestamp}.png"
            image.save(screenshot_path)
            
            print(f"‚úÖ Screenshot saved: {screenshot_path}")
            print(f"üìè Image size: {image.size[0]} x {image.size[1]} pixels")
            print(f"üíæ File size: {os.path.getsize(screenshot_path)} bytes")
            
            # Image ‡§ï‡•ã open ‡§ï‡§∞‡•á‡§Ç
            print("\nüñºÔ∏è  Opening screenshot...")
            if open_image(screenshot_path):
                print("‚úÖ Screenshot opened in default viewer")
            
            # OCR ‡§ï‡•á ‡§≤‡§ø‡§è image ‡§ï‡•ã numpy array ‡§Æ‡•á‡§Ç convert ‡§ï‡§∞‡•á‡§Ç
            import numpy as np
            image_array = np.array(image)
            
            # OCR object ‡§¨‡§®‡§æ‡§è‡§Ç ‡§î‡§∞ text ‡§™‡§¢‡§º‡•á‡§Ç
            print("\nüìñ Screen ‡§™‡§∞ text reading...")
            ocr = OCR()
            text = await ocr.extract_text(image_array)
            
            print("\n" + "=" * 60)
            print("üìñ SCREEN ‡§™‡§∞ ‡§Æ‡§ø‡§≤‡§æ TEXT:")
            print("=" * 60)
            
            if text and "not available" not in text.lower() and "error" not in text.lower():
                # Text ‡§ï‡•ã clean ‡§ï‡§∞‡•á‡§Ç
                lines = text.strip().split('\n')
                cleaned_lines = [line.strip() for line in lines if line.strip()]
                
                if cleaned_lines:
                    for i, line in enumerate(cleaned_lines, 1):
                        print(f"{i:2d}. {line}")
                else:
                    print("üîç ‡§ï‡•ã‡§à readable text ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ")
            else:
                print("‚ö†Ô∏è  TEXT READING ‡§ï‡•á ‡§≤‡§ø‡§è TESSERACT OCR INSTALL ‡§ï‡§∞‡§®‡§æ ‡§π‡•ã‡§ó‡§æ")
                print("üì• Download: https://github.com/UB-Mannheim/tesseract/wiki")
                print(f"üîç Status: {text}")
                print("\nüí° Installation guide: install_tesseract.md file ‡§¶‡•á‡§ñ‡•á‡§Ç")
            
            print("=" * 60)
            
        else:
            print("‚ùå Screenshot ‡§≤‡•á‡§®‡•á ‡§Æ‡•á‡§Ç problem ‡§π‡•Å‡§à")
            
    except Exception as e:
        logger.error(f"Error: {e}")
        print(f"‚ùå Error: {e}")
    
    finally:
        # Cleanup
        screenshot.close()

async def main():
    """Main function"""
    await take_and_view_screenshot()
    
    print("\n‚ú® Script completed!")
    print("üí° Screenshot file ‡§Ü‡§™‡§ï‡•á current directory ‡§Æ‡•á‡§Ç save ‡§π‡•Å‡§à ‡§π‡•à")
    print("üîß Text reading ‡§ï‡•á ‡§≤‡§ø‡§è Tesseract install ‡§ï‡§∞‡•á‡§Ç")
    
    # User ‡§ï‡•ã options ‡§¶‡•á‡§Ç
    print("\n" + "=" * 60)
    print("üìã NEXT STEPS:")
    print("1. Screenshot file ‡§ï‡•ã manually ‡§≠‡•Ä open ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç")
    print("2. Tesseract install ‡§ï‡§∞‡§ï‡•á text reading enable ‡§ï‡§∞‡•á‡§Ç")
    print("3. Script ‡§ï‡•ã ‡§´‡§ø‡§∞ ‡§∏‡•á run ‡§ï‡§∞‡§ï‡•á text reading test ‡§ï‡§∞‡•á‡§Ç")
    print("=" * 60)

if __name__ == "__main__":
    # Run the script
    asyncio.run(main())